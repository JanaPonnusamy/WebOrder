<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Supplier Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f0f2f5;
      margin: 0;
      padding: 10px;
      color: #333;
      text-align: center;
    }
    .header {
      background: linear-gradient(to right, #6a11cb, #2575fc);
      padding: 10px 20px;
      border-radius: 10px;
      color: white;
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      align-items: center;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      margin-bottom: 10px;
    }
    .header .info-block {
      font-size: 13px;
      line-height: 1.4;
      min-width: 200px;
    }
    table {
      margin: 0 auto;
      border-collapse: collapse;
      background: white;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    th, td {
      border: 1px solid #ddd;
      padding: 2px 4px;
      font-size: 11px;
    }
    th {
      background: #f3f4f6;
    }
    th:nth-child(1), td:nth-child(1) { text-align: center; width: 50px; }
    th:nth-child(2), td:nth-child(2) { text-align: right; width: 80px; }
    th:nth-child(3), td:nth-child(3) { text-align: left; width: 280px; }
    th:nth-child(4), td:nth-child(4) { text-align: right; width: 70px; }
    th:nth-child(5), td:nth-child(5) { text-align: right; width: 60px; }
    th:nth-child(6), td:nth-child(6) { text-align: center; width: 60px; }
    th:nth-child(7), td:nth-child(7) { text-align: right; width: 80px; }
    th:nth-child(8), td:nth-child(8) { text-align: center; width: 100px; }
    th:nth-child(9), td:nth-child(9) { text-align: center; width: 100px; }
    th:nth-child(10), td:nth-child(10) { text-align: left; width: 120px; }

    input[type="number"] {
      width: 40px;
      font-size: 12px;
    }
    .available {
      color: green;
    }
    .not-available {
      color: red;
    }
    .btn-save, .btn-download {
      margin-top: 10px;
      background: #007bff;
      color: white;
      padding: 4px 8px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-right: 6px;
      font-size: 11px;
    }
    .btn-save:hover, .btn-download:hover {
      background: #0056b3;
    }
    .pagination {
      margin-top: 10px;
      text-align: center;
    }
    .pagination button {
      padding: 4px 6px;
      margin: 0 2px;
      background: #eee;
      border: 1px solid #ccc;
      cursor: pointer;
      font-size: 11px;
    }
    .pagination button.active {
      background: #007bff;
      color: white;
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="info-block">
      <div><strong id="supplierName">Loading Supplier...</strong></div>
      <div style="font-size: 11px;">(Mobile: <span id="mobile">--</span> | GST: <span id="gst">--</span>)</div>
    </div>
    <div class="info-block" style="text-align: right">
      <div><strong id="storeFullName">Loading Store...</strong></div>
      <div style="font-size: 11px;" id="storeAddress"></div>
    </div>
  </div>
  <table>
    <thead>
      <tr>
        <th>S.No</th>
        <th>Product Code</th>
        <th>Product Name</th>
        <th>Order Qty</th>
        <th>Pack</th>
        <th>Unit</th>
        <th>MRP</th>
        <th>Order Date</th>
        <th>Order ID</th>
        <th>Remarks</th>
      </tr>
    </thead>
    <tbody id="orderTableBody"></tbody>
  </table>
  <div class="pagination" id="pagination"></div>
  <button class="btn-save" onclick="saveChanges()">Save Changes</button>
  <button class="btn-download" onclick="downloadExcel()">Download Excel</button>
  <button class="btn-download" onclick="downloadPDF()">Download PDF</button>
  <script>
    const storeName = "{{ store_name }}";
    const supplierCode = "{{ supplier_code }}";

    console.log("Login Session StoreName:", storeName);
    console.log("Login Session SupplierCode:", supplierCode);

    const rowsPerPage = 20;
    let currentPage = 1;
    let orders = [];

    async function loadSupplierDetails() {
      const res = await fetch('/get_supplier_info');
      const data = await res.json();
      console.log("All supplier info:", data);
      const supplier = data.find(s => 
        String(s.suppliercode).trim() === String(supplierCode).trim() &&
        String(s.StoreName).trim().toUpperCase() === String(storeName).trim().toUpperCase()
      );
      console.log("Supplier found:", supplier);
      if (supplier) {
        document.getElementById('supplierName').innerText = supplier.Suppliername || 'Supplier';
        document.getElementById('mobile').innerText = supplier.MobileNumber || 'N/A';
        document.getElementById('gst').innerText = supplier.GSTNumber || 'N/A';
      }
    }

async function loadStoreDetails() {
  const res = await fetch('/get_store_headers');
  const data = await res.json();
  console.log("All store headers:", data);
  const store = data.find(s => String(s.StoreName).trim().toUpperCase() === String(storeName).trim().toUpperCase());
  console.log("Store found:", store);
  if (store) {
    document.getElementById('storeFullName').innerText = store.StoreFullName;
    document.getElementById('storeAddress').innerText = `${store.Address1}, ${store.Address2}`;
  } else {
    document.getElementById('storeFullName').innerText = storeName;
    document.getElementById('storeAddress').innerText = "";
  }
}

    async function loadOrders() {
      const res = await fetch(`/get_orders/${storeName}/${supplierCode}`);
      const result = await res.json();
      console.log("Fetched orders:", result);
      if (result.success) {
        orders = result.data.map(o => {
          const orderDate = o.OrderId ? `${o.OrderId.substring(6,8)}-${o.OrderId.substring(4,6)}-${o.OrderId.substring(0,4)}` : '';
          return {
            ...o,
            ProductCode: o.ProductCode || o.Productcode || o.productcode || '',
            ProductName: o.ProductName || o.Productname || o.productname || '',
            OrderQty: o.OrderQty || o.Orderqty || o.orderqty || 0,
            Pack: o.Pack || o.SaleUnit || o.saleunit || '',
            UnitDescription: o.UnitDescription || '',
            MRP: parseFloat(o.MRP || o.mrp || 0).toFixed(2),
            OrderDate: orderDate,
            OrderId: o.OrderId || ''
          };
        });

        orders.forEach((o, i) => {
          if (!o.ProductName) {
            console.warn("Missing ProductName in row", i + 1, o);
          }
        });

        renderPage();
      }
    }

    function renderPage() {
      const tbody = document.getElementById('orderTableBody');
      tbody.innerHTML = '';
      const start = (currentPage - 1) * rowsPerPage;
      const end = Math.min(start + rowsPerPage, orders.length);
      for (let i = start; i < end; i++) {
        const o = orders[i];
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${i + 1}</td>
          <td>${o.ProductCode}</td>
          <td>${o.ProductName}</td>
          <td><input type="number" value="${o.OrderQty}" data-index="${i}" onchange="updateRemarks(this)"></td>
          <td>${o.Pack}</td>
          <td>${o.UnitDescription}</td>
          <td style="text-align:right">${o.MRP}</td>
          <td>${o.OrderDate}</td>
          <td>${o.OrderId}</td>
          <td class="remarks available">Available ✅</td>
        `;
        tbody.appendChild(row);
      }
      renderPagination();
    }

    function renderPagination() {
      const pageCount = Math.ceil(orders.length / rowsPerPage);
      const container = document.getElementById('pagination');
      container.innerHTML = '';
      for (let i = 1; i <= pageCount; i++) {
        const btn = document.createElement('button');
        btn.textContent = i;
        btn.className = (i === currentPage) ? 'active' : '';
        btn.onclick = () => { currentPage = i; renderPage(); };
        container.appendChild(btn);
      }
    }

    function updateRemarks(input) {
      const index = input.dataset.index;
      const row = input.closest('tr');
      const cell = row.querySelector('.remarks');
      const newQty = parseInt(input.value);
      const oldQty = parseInt(orders[index].OrderQty);
      if (newQty === 0) {
        cell.innerText = 'Not Available ❌';
        cell.className = 'remarks not-available';
      } else if (newQty !== oldQty) {
        cell.innerText = `Available ✅ (${newQty - oldQty >= 0 ? '+' : ''}${newQty - oldQty})`;
        cell.className = 'remarks available';
      } else {
        cell.innerText = 'Available ✅';
        cell.className = 'remarks available';
      }
      orders[index].OrderQty = newQty;
    }

    function saveChanges() {
      console.log("Changes saved:", orders);
    }
function downloadExcel() {
  saveChanges();
  const visibleData = orders.map(o => ({
    "S.No": orders.indexOf(o) + 1,
    "Product Code": o.ProductCode,
    "Product Name": o.ProductName,
    "Order Qty": o.OrderQty,
    "Pack": o.Pack,
    "Unit": o.UnitDescription,
    "MRP": o.MRP,
    "Order Date": o.OrderDate,
    "Order ID": o.OrderId,
    "Remarks": "Available"
  }));
  const ws = XLSX.utils.json_to_sheet(visibleData);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Orders");
  XLSX.writeFile(wb, `Order_${storeName}_${supplierCode}.xlsx`);
}


function downloadPDF() {
  saveChanges();
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF({ orientation: 'landscape', unit: 'pt', format: 'A4' });

  doc.setFontSize(14);
  doc.text(`Order List - ${document.getElementById('storeFullName').innerText}`, 40, 30);

  const headers = [[
    "S.No", "Product Code", "Product Name", "Order Qty",
    "Pack", "Unit", "MRP", "Order Date", "Order ID", "Remarks"
  ]];

  const data = orders.map((o, i) => [
    i + 1,
    o.ProductCode,
    o.ProductName,
    o.OrderQty,
    o.Pack,
    o.UnitDescription,
    o.MRP,
    o.OrderDate,
    o.OrderId,
    "Available"
  ]);

  doc.autoTable({
    head: headers,
    body: data,
    startY: 50,
    styles: { fontSize: 8 },
    margin: { left: 30, right: 30 },
    headStyles: { fillColor: [58, 108, 180] },
    alternateRowStyles: { fillColor: [240, 240, 240] }
  });

  doc.save(`Order_${storeName}_${supplierCode}.pdf`);
}

    loadSupplierDetails();
    loadStoreDetails();
    loadOrders();
  </script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>

</body>
</html>
